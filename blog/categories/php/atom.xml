<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | blog.tolleiv.de]]></title>
  <link href="http://blog.tolleiv.de/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://blog.tolleiv.de/"/>
  <updated>2014-05-04T13:31:47+02:00</updated>
  <id>http://blog.tolleiv.de/</id>
  <author>
    <name><![CDATA[Tolleiv Nietsch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bye bye version 4...]]></title>
    <link href="http://blog.tolleiv.de/2008/08/bye-bye-version-4/"/>
    <updated>2008-08-08T19:30:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/08/bye-bye-version-4</id>
    <content type="html"><![CDATA[<p>Ten years ago Andi Gutmans and Zeev Suraski started to renew the old PHP3 core and in 1999 PHP4 was published and became really famous among Web-Developers.<br/>
Bute 5 years late the successor was published and since then everyone is wondering why the era of PHP4 will end.<br/>
Today is the magical 8-8-8 where PHP4 is no longer supported so for everyone who still runs PHP4 for some reason<br/>
YOU SHOW NOW REALLY HAVE A LOOK AT THIS PAGE: <a href="http://www.php.net/manual/en/migration5.php">www.php.net/manual/en/migration5.php</a></p>

<p>Detailed history of PHP can be found on <a href="http://www.php.net/history">www.php.net/history</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterator [GoF]]]></title>
    <link href="http://blog.tolleiv.de/2008/07/iterator-gof/"/>
    <updated>2008-07-07T19:30:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/07/iterator-gof</id>
    <content type="html"><![CDATA[<p>Lot&rsquo;s of people like to write down things into lists, so that they can go through that list later and check whether everything was fine. Normally every recipe has a list ~ there&rsquo;s always a list of ingredients at the beginning of the recipe.
This short example shows how such a list can be processed in PHP. So why would you want to have something else than a array to hold your objects? &ndash; My example still uses a array to hold the objects (uni- or bidirectional lists would also be possible) but it adds a kind of a facade to the array so that the common managements-tasks are handled within the List-Object. Everything you need for this example is present in PHP since version 5.0. The basic steps you need to do is to provide a &ldquo;Object&rdquo; and an &ldquo;ObjectList&rdquo; which implements the native <a href="http://www.php.net/manual/en/language.oop5.iterations.php">&ldquo;Iterator&rdquo;</a> interface and then you&rsquo;re able to have very handy lists :)</p>

<p>class Incredient {</p>

<p>public $name,$amount;
public function __construct($name,$amount) {
$this->name = $name;
$this->amount = $amount;
}
}</p>

<p>class Recipe implements Iterator {
public $title;
private $ingredients;</p>

<p>public function __construct ($title) {
$this->title = $title;
}</p>

<p>public function addIncredient(Incredient $in) {
$this->ingredients[] = $in;
}</p>

<p>public function current ()  {   return current ($this->ingredients);    }
public function key ()      {   return key($this->ingredients);         }
public function valid ()    {   return current ($this->ingredients);    }
public function rewind ()   {   return reset ($this->ingredients);      }
public function next ()     {   return next ($this->ingredients);       }
}</p>

<p>$cookieRecipe = new Recipe(&ldquo;Chocolate Cookie&rdquo;);
$cookieRecipe->addIncredient(new Incredient(&lsquo;Flour&rsquo;,&lsquo;2.5 cups&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Baking soda&rsquo;,&lsquo;1 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Salt&rsquo;,&lsquo;0.5 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Butter&rsquo;,&lsquo;1 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Sugar&rsquo;,&lsquo;1 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Brown Sugar&rsquo;,&lsquo;0.5 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Vanilla extract&rsquo;,&lsquo;1 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Egg&rsquo;,&lsquo;1-2&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Chocolate chips&rsquo;,&lsquo;2 cups&rsquo;));</p>

<p>// process recipe:
foreach($cookieRecipe as $inc) {
echo $inc->name.&ldquo; => &rdquo;.$inc->amount.&ldquo;<br/>&rdquo;;
}</p>

<p>As you see it&rsquo;s pretty easy to have lists of objects in PHP. You might also think that always creating to some list-object over and over again is very odd and you&rsquo;re right. For the most common tasks like <a href="http://www.php.net/manual/en/class.arrayiterator.php">iterating through arrays</a>, <a href="http://www.php.net/manual/en/class.directoryiterator.php">directory-lists</a> and a few more task you can use objects which are shipped with the Standard PHP Library ,which is also part of PHP since version 5 and mandatory in 5.3. So the example shown above could also look like this:</p>

<p>$recipe = array();
$recipe[] = new Incredient(&lsquo;Flour&rsquo;,&lsquo;2.5 cups&rsquo;);
$recipe[] = new Incredient(&lsquo;Baking soda&rsquo;,&lsquo;1 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Salt&rsquo;,&lsquo;0.5 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Butter&rsquo;,&lsquo;1 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Sugar&rsquo;,&lsquo;1 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Brown Sugar&rsquo;,&lsquo;0.5 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Vanilla extract&rsquo;,&lsquo;1 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Egg&rsquo;,&lsquo;1-2&rsquo;);
$recipe[] = new Incredient(&lsquo;Chocolate chips&rsquo;,&lsquo;2 cups&rsquo;);</p>

<p>$recipeIncObj = new ArrayObject($recipe);
$ingredientsIt = $recipeIncObj->getIterator();</p>

<p>foreach($ingredientsIt as $inc) {
echo $inc->name.&ldquo; => &rdquo;.$inc->amount.&ldquo;<br/>&rdquo;;
}</p>

<p>As I said at the beginning, there are lots of situations where you might want to have a list for something and if you store that list in PHP the Iterator-pattern can keep your code clean and tasty :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Null-Object Pattern]]></title>
    <link href="http://blog.tolleiv.de/2008/07/null-object-pattern/"/>
    <updated>2008-07-01T19:58:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/07/null-object-pattern</id>
    <content type="html"><![CDATA[<p>Very often you create a object with a factory and before you really start using it, you check if your factory really created a object or returned NULL. Or maybe you have a method where a object is passed in and in this situation you&rsquo;ll have to do this check also.</p>

<p>Instead of typing the &ldquo;if(object == null)&rdquo; phrase again and again, you could use the Null-Object pattern, you&rsquo;ll see that this can make some situations much clearer.</p>

<p>Basically Null-Object ensures that the client always receives a valid object for it&rsquo;s interaction, so that there&rsquo;s no need to do the check shown above again and again. This happens since your concrete Null-Object just shares the interface, or inherits from the same class as it&rsquo;s effective counterpart, but it&rsquo;s implementation just leaves out any effectiveness.
<a href="http://bp3.blogger.com/_l5fIZzJyYfc/SGpiDZ9m-rI/AAAAAAAAACo/nVuiUHE4E90/s1600-h/nullobject_pattern.png">
<img src="http://bp3.blogger.com/_l5fIZzJyYfc/SGpiDZ9m-rI/AAAAAAAAACo/nVuiUHE4E90/s400/nullobject_pattern.png" alt="" /></a> So a code-example could look like this:</p>

<p>class CookieFactory {
public function makeInstance() {
if(date(&lsquo;l&rsquo;)==&lsquo;Monday&rsquo;) return new NullCookie();
return new RealCookie();
}
}</p>

<p>interface iCookie {
function getCalories();
}</p>

<p>class RealCookie implements iCookie {
protected $calories=250;
public function getCalories() {
return $this->calories;
}
}</p>

<p>class NullCookie implements iCookie {
public function getCalories() {
return 0;
}
}</p>

<p>I think you can imagine what happens when you make use of the CookieFactory &ndash; diet on monday ;)</p>

<p>There&rsquo;re also some disadvantages, your clients normally don&rsquo;t have a chance to react that there&rsquo;s something special happening, also the clients must &ldquo;share&rdquo; the same expectation what &ldquo;do nothing&rdquo; means, the number of required Null-Objects might be very large and unhandy and the Null-Object shares a very deep knowledge with the real one, so that it might be a large effort to create it if the real object is complex too.</p>

<p>I&rsquo;m so glad that today is tuesday :P</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Façade [GoF]]]></title>
    <link href="http://blog.tolleiv.de/2008/06/facade-gof/"/>
    <updated>2008-06-17T01:33:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/06/facade-gof</id>
    <content type="html"><![CDATA[<p>If a child is in the mood to eat a fresh cookie it normally asks his granny for one. Like this:</p>

<p>Child: Grannyyyyy?<br/>
Granny: Yes my dear?<br/>
Child: Could you mix about 2 cups of sugar, &frac12; cup of butter and &frac12; cup of milk in a saucepan and boil it for a minute. And could you, after you removed the saucepan from the heat, mix in some cocoa powder and 3 cups quick cooking oats and form some cookies? Pleeease?</p>

<p>Hm you&rsquo;re right that&rsquo;s not very realistic &ndash; it&rsquo;s more like: &ldquo;Grannyyyy? Could I have a cooookieee pleeeease?&rdquo; &hellip;.the granny knows what to do and the child will get it&rsquo;s cookie</p>

<p>So what happens if you have a pice of software which provides <strike>cookies</strike> some services for other parts of your software? The most people (especially programmers) are lazy and they won&rsquo;t remember all the details of a complex structure. They remember the place or object which can run a certain task but there&rsquo;s no need to know the deeper structure of that object &ndash; the only thing which is important if your using a service of an object is that it doesn&rsquo;t fail.<br/>
So the Façade pattern is a structural pattern which more or less describes that you create a object with an simplified interface, so that you can hide complex structures. You can also use a Façade to wrap up some poorly designed APIs into a single well designed API. And the larges benefit of a Façade object is that it makes APIs more readable and therefore enables flexible and easy development.</p>

<p>So maybe you&rsquo;re missing the example-code for this pattern, but since it&rsquo;s not that concrete as others, I&rsquo;ve not implemented a  special example for it. But I already used a Facade in some way, if you look at the <a href="http://www.cookiepattern.com/2008/05/specification-ddd.html">Specification pattern</a>, you&rsquo;ll find the functions getSmallChocolateCookies() and getLargeCookies(). Both show in a tasty way what I described  here :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inherit abstract functions....]]></title>
    <link href="http://blog.tolleiv.de/2008/06/inherit-abstract-functions/"/>
    <updated>2008-06-11T22:28:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/06/inherit-abstract-functions</id>
    <content type="html"><![CDATA[<p>A error I find from time to time when I work with inheritance is this one:</p>

<p>Fatal error: Can&rsquo;t inherit abstract function Cookie::setFlavor() (previously declared abstract in ChocolateCookie) in &hellip;</p>

<p>This happens when you try to define multiple abstract classes or interfaces with the same abstract functions &ndash; it&rsquo;s right that this errors shows up, but today I stuck on this error for a while because I did not see the reason for that &ndash; so that&rsquo;s a reminder for me ;)</p>

<p>And the tasty example to reproduce this error:</p>

<p>abstract class Cookie {<br/>
abstract public function setFlavor($flavor);<br/>
}</p>

<p>abstract class ChocolateCookie extends Cookie {<br/>
abstract public function setFlavor($flavor);<br/>
}</p>

<p>There are also some rejected bugreports about that :P <a href="http://bugs.php.net/bug.php?id=35057">#35057</a> <a href="http://bugs.php.net/bug.php?id=35832">#35832</a> <a href="http://bugs.php.net/bug.php?id=41145">#41145</a></p>
]]></content>
  </entry>
  
</feed>
