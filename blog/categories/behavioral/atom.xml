<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: behavioral | blog.tolleiv.de]]></title>
  <link href="http://blog.tolleiv.de/blog/categories/behavioral/atom.xml" rel="self"/>
  <link href="http://blog.tolleiv.de/"/>
  <updated>2015-11-20T18:24:20+01:00</updated>
  <id>http://blog.tolleiv.de/</id>
  <author>
    <name><![CDATA[Tolleiv Nietsch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iterator [GoF]]]></title>
    <link href="http://blog.tolleiv.de/2008/07/iterator-gof/"/>
    <updated>2008-07-07T19:30:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/07/iterator-gof</id>
    <content type="html"><![CDATA[<p>Lot&rsquo;s of people like to write down things into lists, so that they can go through that list later and check whether everything was fine. Normally every recipe has a list ~ there&rsquo;s always a list of ingredients at the beginning of the recipe.
This short example shows how such a list can be processed in PHP. So why would you want to have something else than a array to hold your objects? &ndash; My example still uses a array to hold the objects (uni- or bidirectional lists would also be possible) but it adds a kind of a facade to the array so that the common managements-tasks are handled within the List-Object. Everything you need for this example is present in PHP since version 5.0. The basic steps you need to do is to provide a &ldquo;Object&rdquo; and an &ldquo;ObjectList&rdquo; which implements the native <a href="http://www.php.net/manual/en/language.oop5.iterations.php">&ldquo;Iterator&rdquo;</a> interface and then you&rsquo;re able to have very handy lists :)</p>

<p>class Incredient {</p>

<p>public $name,$amount;
public function __construct($name,$amount) {
$this->name = $name;
$this->amount = $amount;
}
}</p>

<p>class Recipe implements Iterator {
public $title;
private $ingredients;</p>

<p>public function __construct ($title) {
$this->title = $title;
}</p>

<p>public function addIncredient(Incredient $in) {
$this->ingredients[] = $in;
}</p>

<p>public function current ()  {   return current ($this->ingredients);    }
public function key ()      {   return key($this->ingredients);         }
public function valid ()    {   return current ($this->ingredients);    }
public function rewind ()   {   return reset ($this->ingredients);      }
public function next ()     {   return next ($this->ingredients);       }
}</p>

<p>$cookieRecipe = new Recipe(&ldquo;Chocolate Cookie&rdquo;);
$cookieRecipe->addIncredient(new Incredient(&lsquo;Flour&rsquo;,&lsquo;2.5 cups&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Baking soda&rsquo;,&lsquo;1 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Salt&rsquo;,&lsquo;0.5 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Butter&rsquo;,&lsquo;1 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Sugar&rsquo;,&lsquo;1 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Brown Sugar&rsquo;,&lsquo;0.5 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Vanilla extract&rsquo;,&lsquo;1 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Egg&rsquo;,&lsquo;1-2&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Chocolate chips&rsquo;,&lsquo;2 cups&rsquo;));</p>

<p>// process recipe:
foreach($cookieRecipe as $inc) {
echo $inc->name.&ldquo; => &rdquo;.$inc->amount.&ldquo;<br/>&rdquo;;
}</p>

<p>As you see it&rsquo;s pretty easy to have lists of objects in PHP. You might also think that always creating to some list-object over and over again is very odd and you&rsquo;re right. For the most common tasks like <a href="http://www.php.net/manual/en/class.arrayiterator.php">iterating through arrays</a>, <a href="http://www.php.net/manual/en/class.directoryiterator.php">directory-lists</a> and a few more task you can use objects which are shipped with the Standard PHP Library ,which is also part of PHP since version 5 and mandatory in 5.3. So the example shown above could also look like this:</p>

<p>$recipe = array();
$recipe[] = new Incredient(&lsquo;Flour&rsquo;,&lsquo;2.5 cups&rsquo;);
$recipe[] = new Incredient(&lsquo;Baking soda&rsquo;,&lsquo;1 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Salt&rsquo;,&lsquo;0.5 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Butter&rsquo;,&lsquo;1 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Sugar&rsquo;,&lsquo;1 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Brown Sugar&rsquo;,&lsquo;0.5 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Vanilla extract&rsquo;,&lsquo;1 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Egg&rsquo;,&lsquo;1-2&rsquo;);
$recipe[] = new Incredient(&lsquo;Chocolate chips&rsquo;,&lsquo;2 cups&rsquo;);</p>

<p>$recipeIncObj = new ArrayObject($recipe);
$ingredientsIt = $recipeIncObj->getIterator();</p>

<p>foreach($ingredientsIt as $inc) {
echo $inc->name.&ldquo; => &rdquo;.$inc->amount.&ldquo;<br/>&rdquo;;
}</p>

<p>As I said at the beginning, there are lots of situations where you might want to have a list for something and if you store that list in PHP the Iterator-pattern can keep your code clean and tasty :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Null-Object Pattern]]></title>
    <link href="http://blog.tolleiv.de/2008/07/null-object-pattern/"/>
    <updated>2008-07-01T19:58:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/07/null-object-pattern</id>
    <content type="html"><![CDATA[<p>Very often you create a object with a factory and before you really start using it, you check if your factory really created a object or returned NULL. Or maybe you have a method where a object is passed in and in this situation you&rsquo;ll have to do this check also.</p>

<p>Instead of typing the &ldquo;if(object == null)&rdquo; phrase again and again, you could use the Null-Object pattern, you&rsquo;ll see that this can make some situations much clearer.</p>

<p>Basically Null-Object ensures that the client always receives a valid object for it&rsquo;s interaction, so that there&rsquo;s no need to do the check shown above again and again. This happens since your concrete Null-Object just shares the interface, or inherits from the same class as it&rsquo;s effective counterpart, but it&rsquo;s implementation just leaves out any effectiveness.
<a href="http://bp3.blogger.com/_l5fIZzJyYfc/SGpiDZ9m-rI/AAAAAAAAACo/nVuiUHE4E90/s1600-h/nullobject_pattern.png">
<img src="http://bp3.blogger.com/_l5fIZzJyYfc/SGpiDZ9m-rI/AAAAAAAAACo/nVuiUHE4E90/s400/nullobject_pattern.png" alt="" /></a> So a code-example could look like this:</p>

<p>class CookieFactory {
public function makeInstance() {
if(date(&lsquo;l&rsquo;)==&lsquo;Monday&rsquo;) return new NullCookie();
return new RealCookie();
}
}</p>

<p>interface iCookie {
function getCalories();
}</p>

<p>class RealCookie implements iCookie {
protected $calories=250;
public function getCalories() {
return $this->calories;
}
}</p>

<p>class NullCookie implements iCookie {
public function getCalories() {
return 0;
}
}</p>

<p>I think you can imagine what happens when you make use of the CookieFactory &ndash; diet on monday ;)</p>

<p>There&rsquo;re also some disadvantages, your clients normally don&rsquo;t have a chance to react that there&rsquo;s something special happening, also the clients must &ldquo;share&rdquo; the same expectation what &ldquo;do nothing&rdquo; means, the number of required Null-Objects might be very large and unhandy and the Null-Object shares a very deep knowledge with the real one, so that it might be a large effort to create it if the real object is complex too.</p>

<p>I&rsquo;m so glad that today is tuesday :P</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Value Object [DDD]]]></title>
    <link href="http://blog.tolleiv.de/2008/05/value-object-ddd/"/>
    <updated>2008-05-30T06:39:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/05/value-object-ddd</id>
    <content type="html"><![CDATA[<p>This metaphor does not fit completely, and the &ldquo;Money-Example&rdquo; is omnipresent, but I really like the pattern and so that&rsquo;s the story:</p>

<p>Let&rsquo;s say you have your grannies recipe for a chocolate cookie and you want to keep this in mind, but also you like to somehow experiment with some new or different ingredients. Normally you just keep in mind what you changed and later you write down the new recipe. But from time to time you might want to compare the two recipes or maybe you want to make cookies with the new and the changed recipes. In this situation it&rsquo;s really good to have both written down on paper. ;)</p>

<p>In the world of OOP you could think of a solution using the <a href="http://cookiepattern.blogspot.com/search/label/memento?max-results=100">Memento-Pattern</a> but this doesn&rsquo;t really fit the situation and it&rsquo;s also some kind of overhead. That&rsquo;s the reason why the Value Object is the pattern of my choice.</p>

<p>So let&rsquo;s look at the recipes again &ndash; we want to add and remove ingredients without modifying the original recipe and we want to compare the resulting recipes. We don&rsquo;t need to track a special identity of our recipes since we&rsquo;re only &ldquo;collecting&rdquo; ingredients.</p>

<p>The idea of the Value Object is that every every method which somehow transforms the state of a object always returns a new object and the old object stays untouched. Whenever needed you should also implement a method to compare objects, I must concede that the common &ldquo;Money Example&rdquo; shows much better when that&rsquo;s needed &hellip;</p>

<p>Another edge of this pattern in PHP is that you can use method-chaining to perform multiple actions within a single line of code. So just have a look at the example you will like it&rsquo;s taste :)</p>

<pre><code>class Recipe {
    protected $ingredients;

    public function __construct($ingred=”) {
        $this-&gt;ingredients = implode(‘,’,array_unique(explode(‘,’,$ingred)));
    }

    public function addIncredient($ingred=”) {
        return new Recipe($this-&gt;ingredients.‘,’.$ingred);
    }

    public function removeIncredien($ingred=”) {
        return new Recipe(preg_replace(‘/,{0,1}’.$ingred.‘,{0,1}/’,”,$this-&gt;ingredients.‘,’));
    }

    public function printIncredients() {
        echo str_replace(‘,’,‘&lt;br&gt;&lt;/br&gt;’,$this-&gt;ingredients);
    }

    public function equals(Recipe $recipe) {
        return (strcmp($this-&gt;ingredients,$recipe-&gt;ingredients)===0)?true:false;
    }
}


$granniesRecipe = new Recipe(‘flour,baking soda,sugar,salt,butter,vanilla,chocolate’);
$aNewRecipe = $granniesRecipe-&gt;addIncredient(‘lemon’);
$coconutRecipe = $granniesRecipe-&gt;removeIncredien(‘chocolate’)-&gt;addIncredient(‘coconut’);

// check if that worked:
echo ‘&lt;br&gt;&lt;/br&gt;&lt;strong&gt; Grannies Cookie Recipe – Incredients are:&lt;/strong&gt;&lt;br&gt;&lt;/br&gt;’;
$granniesRecipe-&gt;printIncredients();
echo ‘&lt;br&gt;&lt;/br&gt;&lt;strong&gt; A new Cookie Recipe could look like:&lt;/strong&gt;&lt;br&gt;&lt;/br&gt;’;
$aNewRecipe-&gt;printIncredients();
echo ‘&lt;br&gt;&lt;/br&gt;&lt;strong&gt; A coconut cookie would look like:&lt;/strong&gt;&lt;br&gt;&lt;/br&gt;’;
$coconutRecipe-&gt;printIncredients();
</code></pre>

<p>The implementation is a bit odd, since it only collects the names of the ingredients but not the amount, but including the amounts of incredients would not change the concept  and that&rsquo;s why I left it out. I hope you got a idea how the pattern works &ndash; the main thing is that there&rsquo;s no identity and that new objects are instantiated as soon as the state of the old one would change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memento [GoF]]]></title>
    <link href="http://blog.tolleiv.de/2008/05/memento-gof/"/>
    <updated>2008-05-13T09:59:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/05/memento-gof</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say you got a cookie from a repository your granny and you&rsquo;re not sure if you like the new taste. Wouldn&rsquo;t it be cool if you could just try it and revoke the operation first bite if you don&rsquo;t like it?</p>

<p>In the world of OOP thats a easy job which can be handled by the so called memento pattern &ndash; you just save the inner state of the object  within a memento object and revoke you actions whenever you like&hellip;</p>

<p>As UML the example looks like this:
<a href="http://bp2.blogger.com/_l5fIZzJyYfc/SClV6dPibdI/AAAAAAAAABA/bFyT-BEsqrU/s1600-h/memento-pattern.png"><img src="http://bp2.blogger.com/_l5fIZzJyYfc/SClV6dPibdI/AAAAAAAAABA/bFyT-BEsqrU/s400/memento-pattern.png" alt="" /></a>
Show PHP Source Code</p>

<pre><code>class CookieMemento {
    protected $flavor,$size;    
    public function __construct($flavor,$size=100) {
        $this-&gt;flavor=$flavor;
        $this-&gt;size=$size;
    }
    public function getMemento() {
        return new CookieMemento($this-&gt;flavor,$this-&gt;size);
    }
    public function setMemento(CookieMemento $memento) {
        $this-&gt;flavor=$memento-&gt;flavor;
        $this-&gt;size=$memento-&gt;size;
    }    
}

class Cookie extends CookieMemento {

    public function eat($reduceValue) {     
        $this-&gt;size-=($reduceValue&gt;$this-&gt;size)?$this-&gt;size:$reduceValue;        
    }    

    public function printStatus() {
        echo ‘This cookie is a ’.$this-&gt;flavor.‘ cookie which has a size of ’.$this-&gt;size.‘.&lt;br&gt;&lt;/br&gt;’;
    }
}

class Client { 
    public function run() {
        $theCookie = new Cookie(‘chocolate’,100);
        $theMemento = $theCookie-&gt;getMemento();
        echo $theCookie-&gt;printStatus();        
        $theCookie-&gt;eat(50);
        echo $theCookie-&gt;printStatus();       
        $theCookie-&gt;eat(50);
        echo $theCookie-&gt;printStatus();       
        echo ‘Hm I\’d like to eat it again …. *grin*&lt;br&gt;&lt;/br&gt;’;
        $theCookie-&gt;setMemento($theMemento);
        echo $theCookie-&gt;printStatus();
        echo ‘ *biggrin* ’;
    }
}

$cookieMonster = new Client();
$cookieMonster-&gt;run();
</code></pre>
]]></content>
  </entry>
  
</feed>
