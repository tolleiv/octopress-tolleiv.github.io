<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: facade | the fancy part of the web]]></title>
  <link href="http://tolleiv.github.io/blog/categories/facade/atom.xml" rel="self"/>
  <link href="http://tolleiv.github.io/"/>
  <updated>2014-05-04T01:12:21+02:00</updated>
  <id>http://tolleiv.github.io/</id>
  <author>
    <name><![CDATA[Tolleiv Nietsch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Façade [GoF]]]></title>
    <link href="http://tolleiv.github.io/blog/2008/06/17/facade-gof/"/>
    <updated>2008-06-17T01:33:00+02:00</updated>
    <id>http://tolleiv.github.io/blog/2008/06/17/facade-gof</id>
    <content type="html"><![CDATA[<p>If a child is in the mood to eat a fresh cookie it normally asks his granny for one. Like this:</p>

<p>Child: Grannyyyyy?<br/>
Granny: Yes my dear?<br/>
Child: Could you mix about 2 cups of sugar, &frac12; cup of butter and &frac12; cup of milk in a saucepan and boil it for a minute. And could you, after you removed the saucepan from the heat, mix in some cocoa powder and 3 cups quick cooking oats and form some cookies? Pleeease?</p>

<p>Hm you&rsquo;re right that&rsquo;s not very realistic &ndash; it&rsquo;s more like: &ldquo;Grannyyyy? Could I have a cooookieee pleeeease?&rdquo; &hellip;.the granny knows what to do and the child will get it&rsquo;s cookie</p>

<p>So what happens if you have a pice of software which provides <strike>cookies</strike> some services for other parts of your software? The most people (especially programmers) are lazy and they won&rsquo;t remember all the details of a complex structure. They remember the place or object which can run a certain task but there&rsquo;s no need to know the deeper structure of that object &ndash; the only thing which is important if your using a service of an object is that it doesn&rsquo;t fail.<br/>
So the Façade pattern is a structural pattern which more or less describes that you create a object with an simplified interface, so that you can hide complex structures. You can also use a Façade to wrap up some poorly designed APIs into a single well designed API. And the larges benefit of a Façade object is that it makes APIs more readable and therefore enables flexible and easy development.</p>

<p>So maybe you&rsquo;re missing the example-code for this pattern, but since it&rsquo;s not that concrete as others, I&rsquo;ve not implemented a  special example for it. But I already used a Facade in some way, if you look at the <a href="http://www.cookiepattern.com/2008/05/specification-ddd.html">Specification pattern</a>, you&rsquo;ll find the functions getSmallChocolateCookies() and getLargeCookies(). Both show in a tasty way what I described  here :)</p>
]]></content>
  </entry>
  
</feed>
