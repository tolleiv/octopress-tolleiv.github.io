<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pattern | blog.tolleiv.de]]></title>
  <link href="http://blog.tolleiv.de/blog/categories/pattern/atom.xml" rel="self"/>
  <link href="http://blog.tolleiv.de/"/>
  <updated>2014-05-04T13:09:16+02:00</updated>
  <id>http://blog.tolleiv.de/</id>
  <author>
    <name><![CDATA[Tolleiv Nietsch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Signal / Slots in Extbase]]></title>
    <link href="http://blog.tolleiv.de/2011/11/signal-slots-in-extbase/"/>
    <updated>2011-11-30T18:17:02+01:00</updated>
    <id>http://blog.tolleiv.de/2011/11/signal-slots-in-extbase</id>
    <content type="html"><![CDATA[<p>A nice thing to have at hand is definately <a href="http://en.wikipedia.org/wiki/Signals_and_slots">Signal and Slots</a>. I heard <a href="http://f.oer.tel">Felix</a> talking about them quite often and I finally found a nice usecase and came to play with them a little bit this afternoon. And just to avoid that others have to look around too much to find how they can get them to work here&rsquo;s how it&rsquo;s working for me.</p>

<p>First of all you should understand the concept. This nice little &ldquo;definition&rdquo; (from <a href="http://flow3.typo3.org/documentation/guide/partiii/signalsandslots.html">flow3.typo3.org</a>) sums it up pretty well:</p>

<blockquote><p>A signal, which contains event information as it makes sense in the case at hand, can be emitted (sent) by any part of the code and is received by one or more slots, which can be any function<del> in FLOW3</del> in extbase.</p></blockquote>

<p>To get this running in extbase, you&rsquo;ve to get hold of the <em>Tx_Extbase_SignalSlot_Dispatcher</em>, which is the central instance to manage all of it. Within Extbase that&rsquo;s done easily with this snippet within your classes:</p>

<pre><code>   ...
    /**
     * @var Tx_Extbase_SignalSlot_Dispatcher
     */
    protected $signalSlotDispatcher;

    /**
     * @param Tx_Extbase_SignalSlot_Dispatcher $signalSlotDispatcher
     */
    public function injectSignalSlotDispatcher(Tx_Extbase_SignalSlot_Dispatcher $signalSlotDispatcher) {
        $this-&gt;signalSlotDispatcher = $signalSlotDispatcher;
    }
   ...
</code></pre>

<p>Next thing is to make use of it. The Slot (listener) part could look like one of following blocks. In all cases you define the Signal by it&rsquo;s class (not necessarily a PHP Class) and it&rsquo;s name. Next to that the Slot can either be defined by a Closure, an object with a method name or a PHP-Class and a method name.</p>

<pre><code>   ...
// Using a closure
$this-&gt;signalSlotDispatcher-&gt;connect(
      'Crunching', 'emitDataReady', function($data) { crunch($data) }, NULL, FALSE
);
   ...
// Using a method of the current object
$this-&gt;signalSlotDispatcher-&gt;connect(
     'Crunching', 'emitDataReady', $this, 'crunch', FALSE
);
   ...
// Using a method of the specified class
$this-&gt;signalSlotDispatcher-&gt;connect(
     'Crunching', 'emitDataReady', 'Cruncher', 'crunch', FALSE
);
   ...
</code></pre>

<p>To trigger the Signal which invokes the Slots registered above, you&rsquo;ve to run the following code.</p>

<pre><code>$this-&gt;signalSlotDispatcher-&gt;dispatch('Crunching', 'emitDataReady', array($data));
</code></pre>

<p>One thing I found was that by default the <em>Tx_Extbase_SignalSlot_Dispatcher</em> it not a Singleton in older extbase versions. Bastian fixed that already in the <a href="https://review.typo3.org/#change,6785">master</a> and <a href="https://review.typo3.org/#change,6786">1-4</a> branches and lucky enough this change was part within the TYPO3 4.6.1 release. But I think it&rsquo;s still important to mention that this wasn&rsquo;t the default from the beginning on.</p>

<p>Even if <a href="http://flow3.typo3.org/documentation/guide/partiii/signalsandslots.html">AOP is a nicer way to implement this feature</a>, the extbase backport still works pretty straigh forward.</p>

<p>Edit: One thing I&rsquo;ve to add &ndash; Felix is not &ldquo;just&rdquo; talking about Signal/Slots &ndash; he&rsquo;s the one to thank for the <a href="https://review.typo3.org/1563">backport</a>. And now that his <a href="http://blog.foertel.com/2011/10/using-signalslots-in-extbase/">blog</a> is running again &ndash; this post seems like a summary ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterator [GoF]]]></title>
    <link href="http://blog.tolleiv.de/2008/07/iterator-gof/"/>
    <updated>2008-07-07T19:30:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/07/iterator-gof</id>
    <content type="html"><![CDATA[<p>Lot&rsquo;s of people like to write down things into lists, so that they can go through that list later and check whether everything was fine. Normally every recipe has a list ~ there&rsquo;s always a list of ingredients at the beginning of the recipe.
This short example shows how such a list can be processed in PHP. So why would you want to have something else than a array to hold your objects? &ndash; My example still uses a array to hold the objects (uni- or bidirectional lists would also be possible) but it adds a kind of a facade to the array so that the common managements-tasks are handled within the List-Object. Everything you need for this example is present in PHP since version 5.0. The basic steps you need to do is to provide a &ldquo;Object&rdquo; and an &ldquo;ObjectList&rdquo; which implements the native <a href="http://www.php.net/manual/en/language.oop5.iterations.php">&ldquo;Iterator&rdquo;</a> interface and then you&rsquo;re able to have very handy lists :)</p>

<p>class Incredient {</p>

<p>public $name,$amount;
public function __construct($name,$amount) {
$this->name = $name;
$this->amount = $amount;
}
}</p>

<p>class Recipe implements Iterator {
public $title;
private $ingredients;</p>

<p>public function __construct ($title) {
$this->title = $title;
}</p>

<p>public function addIncredient(Incredient $in) {
$this->ingredients[] = $in;
}</p>

<p>public function current ()  {   return current ($this->ingredients);    }
public function key ()      {   return key($this->ingredients);         }
public function valid ()    {   return current ($this->ingredients);    }
public function rewind ()   {   return reset ($this->ingredients);      }
public function next ()     {   return next ($this->ingredients);       }
}</p>

<p>$cookieRecipe = new Recipe(&ldquo;Chocolate Cookie&rdquo;);
$cookieRecipe->addIncredient(new Incredient(&lsquo;Flour&rsquo;,&lsquo;2.5 cups&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Baking soda&rsquo;,&lsquo;1 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Salt&rsquo;,&lsquo;0.5 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Butter&rsquo;,&lsquo;1 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Sugar&rsquo;,&lsquo;1 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Brown Sugar&rsquo;,&lsquo;0.5 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Vanilla extract&rsquo;,&lsquo;1 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Egg&rsquo;,&lsquo;1-2&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Chocolate chips&rsquo;,&lsquo;2 cups&rsquo;));</p>

<p>// process recipe:
foreach($cookieRecipe as $inc) {
echo $inc->name.&ldquo; => &rdquo;.$inc->amount.&ldquo;<br/>&rdquo;;
}</p>

<p>As you see it&rsquo;s pretty easy to have lists of objects in PHP. You might also think that always creating to some list-object over and over again is very odd and you&rsquo;re right. For the most common tasks like <a href="http://www.php.net/manual/en/class.arrayiterator.php">iterating through arrays</a>, <a href="http://www.php.net/manual/en/class.directoryiterator.php">directory-lists</a> and a few more task you can use objects which are shipped with the Standard PHP Library ,which is also part of PHP since version 5 and mandatory in 5.3. So the example shown above could also look like this:</p>

<p>$recipe = array();
$recipe[] = new Incredient(&lsquo;Flour&rsquo;,&lsquo;2.5 cups&rsquo;);
$recipe[] = new Incredient(&lsquo;Baking soda&rsquo;,&lsquo;1 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Salt&rsquo;,&lsquo;0.5 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Butter&rsquo;,&lsquo;1 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Sugar&rsquo;,&lsquo;1 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Brown Sugar&rsquo;,&lsquo;0.5 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Vanilla extract&rsquo;,&lsquo;1 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Egg&rsquo;,&lsquo;1-2&rsquo;);
$recipe[] = new Incredient(&lsquo;Chocolate chips&rsquo;,&lsquo;2 cups&rsquo;);</p>

<p>$recipeIncObj = new ArrayObject($recipe);
$ingredientsIt = $recipeIncObj->getIterator();</p>

<p>foreach($ingredientsIt as $inc) {
echo $inc->name.&ldquo; => &rdquo;.$inc->amount.&ldquo;<br/>&rdquo;;
}</p>

<p>As I said at the beginning, there are lots of situations where you might want to have a list for something and if you store that list in PHP the Iterator-pattern can keep your code clean and tasty :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Null-Object Pattern]]></title>
    <link href="http://blog.tolleiv.de/2008/07/null-object-pattern/"/>
    <updated>2008-07-01T19:58:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/07/null-object-pattern</id>
    <content type="html"><![CDATA[<p>Very often you create a object with a factory and before you really start using it, you check if your factory really created a object or returned NULL. Or maybe you have a method where a object is passed in and in this situation you&rsquo;ll have to do this check also.</p>

<p>Instead of typing the &ldquo;if(object == null)&rdquo; phrase again and again, you could use the Null-Object pattern, you&rsquo;ll see that this can make some situations much clearer.</p>

<p>Basically Null-Object ensures that the client always receives a valid object for it&rsquo;s interaction, so that there&rsquo;s no need to do the check shown above again and again. This happens since your concrete Null-Object just shares the interface, or inherits from the same class as it&rsquo;s effective counterpart, but it&rsquo;s implementation just leaves out any effectiveness.
<a href="http://bp3.blogger.com/_l5fIZzJyYfc/SGpiDZ9m-rI/AAAAAAAAACo/nVuiUHE4E90/s1600-h/nullobject_pattern.png">
<img src="http://bp3.blogger.com/_l5fIZzJyYfc/SGpiDZ9m-rI/AAAAAAAAACo/nVuiUHE4E90/s400/nullobject_pattern.png" alt="" /></a> So a code-example could look like this:</p>

<p>class CookieFactory {
public function makeInstance() {
if(date(&lsquo;l&rsquo;)==&lsquo;Monday&rsquo;) return new NullCookie();
return new RealCookie();
}
}</p>

<p>interface iCookie {
function getCalories();
}</p>

<p>class RealCookie implements iCookie {
protected $calories=250;
public function getCalories() {
return $this->calories;
}
}</p>

<p>class NullCookie implements iCookie {
public function getCalories() {
return 0;
}
}</p>

<p>I think you can imagine what happens when you make use of the CookieFactory &ndash; diet on monday ;)</p>

<p>There&rsquo;re also some disadvantages, your clients normally don&rsquo;t have a chance to react that there&rsquo;s something special happening, also the clients must &ldquo;share&rdquo; the same expectation what &ldquo;do nothing&rdquo; means, the number of required Null-Objects might be very large and unhandy and the Null-Object shares a very deep knowledge with the real one, so that it might be a large effort to create it if the real object is complex too.</p>

<p>I&rsquo;m so glad that today is tuesday :P</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factory [GoF]]]></title>
    <link href="http://blog.tolleiv.de/2008/06/factory-gof/"/>
    <updated>2008-06-23T20:20:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/06/factory-gof</id>
    <content type="html"><![CDATA[<p>Do you remember the <a href="http://www.cookiepattern.com/2008/06/faade-gof.html">Fa</a><a href="http://www.cookiepattern.com/2008/06/faade-gof.html">ç</a><a href="http://www.cookiepattern.com/2008/06/faade-gof.html">ade pattern</a> post? Sure you do :) &ndash; I described a child which asked his granny whether she could bake some cookies. So how this happens in a formal way was describe within the<a href="http://www.cookiepattern.com/2008/06/faade-gof.html"> Fa</a><a href="http://www.cookiepattern.com/2008/06/faade-gof.html">ç</a><a href="http://www.cookiepattern.com/2008/06/faade-gof.html">ade pattern</a> post ;) but the basic action &ldquo;to ask for sth.&rdquo; is described here&hellip;</p>

<p>As you might remember we had a child, probably a lazy one, which was in the mood to eat some cookies but since the cookie tin was empty it asked his granny to bake some new. In OOP thats nearly the same &ndash; when you&rsquo;d to have a (complex) object and if you don&rsquo;t already have one you need someone who creates it or you do it yourself but since you need remember all the steps to create it, that&rsquo;s something for programmers who likes to type :P</p>

<p>So normally you create a method which wraps up all the code to create the complex object. Or maybe you have  a Aggregate and you don&rsquo;t want that everyone needs to know how it is build up then this method should be the only way to access the Aggregate.</p>

<p>You see now how you can benefit when you have a Factory available &ndash; but there are also some drawbacks. Factories tend to be hard to extend &ndash; this happens because the factory has a very deep (mostly hard-coded) knowledge of the objects it creates and normally all the wiring happens statically. If you&rsquo;re looking for a dynamic way to wire up your objects you might end making heavy use of reflection. In normal projects this might be a bit too much ;)</p>

<p>A normal factory method, for a cookie which requires to have 3 flavors, a predefined size and that it&rsquo;s baked before anyone consumes it, could look like this:</p>

<p>class Cookie {</p>

<p> // &hellip;</p>

<p> /<em><br/>
  * Create a Cookie object which consists<br/>
  * of 3 flavors and has a defined size.<br/>
  </em>/ <br/>
 public function getInstance() {</p>

<pre><code> $c = new Cookie();  
 $c-&gt;setFlavor(Cookie::randomFlavor());  
 $c-&gt;setFlavor(Cookie::randomFlavor());  
 $c-&gt;setFlavor(Cookie::randomFlavor());  
 $c-&gt;setSize(Cookie::randomSize());  
 $c-&gt;bakeIt();  
 return $c;       
</code></pre>

<p> }</p>

<p>}</p>

<p>If your software contains some complexity where you want to switch the used objects (created by a factory) without modifying the clients, which make use of the factory, you&rsquo;ll end up with the so called Abtract factory.</p>

<p>Let&rsquo;s say you have two types of Cookies &ndash; the first one is a high-quality cookie with a bunch of different flavors and the second one is a normal chocolate-cookie. The high-quality cookie is created by your granny (slow but mind-blowing taste), the cookies with the lower quality are the result of mass-production. Your &ldquo;client&rdquo; is a wrapping machine which does everything to deliver the cookies to some customers.<br/>
So the wrapping machine won&rsquo;t care what kind of cookies are prepared for delivering and so it doesn&rsquo;t matter who the creator is &ndash; the only thing it has to know is how it can access the cookies&hellip; some kind of interface.<br/>
So the entire szenario could look like this:</p>

<p>class Cookie {</p>

<p>}</p>

<p>interface CookieFactory {<br/>
 abstract function createCookie();<br/>
}</p>

<p>class Granny implements CookieFactory {<br/>
 public function createCookie() {</p>

<pre><code> $cookie = new Cookie();  
 // do some wierd cookie-creation stuff //  
 return $cookie;  
</code></pre>

<p> }<br/>
}</p>

<p>class MassProduction implements CookieFactory {<br/>
 public function createCookie() {</p>

<pre><code> return new Cookie();  
</code></pre>

<p> }<br/>
}</p>

<p>class wrappingMachine {<br/>
 public function run(CookieFactory $factory) {</p>

<pre><code> $i = 6;  
 $package=array();  
 while($i--) {  
     $package[] = $factory-&gt;createCookie();           
 }  
 return $package;  
</code></pre>

<p> }<br/>
}</p>

<p>Client-code could look like this;</p>

<p>$wrapper = new wrappingMachine();<br/>
$highQualityCookiePackage = $wrapper->run(new Granny());<br/>
$lowQualityCookiePackage = $wrapper->run(new MassProduction());</p>

<p>Thats mostly what you can achieve with some normal Factories in the GoF-meaning. Some other interesting ways of object creation are the <a href="http://www.cookiepattern.com/2008/06/plugin-poeaa.html">Plugin pattern</a> and the  <a href="http://www.cookiepattern.com/2008/05/prototype-gof.html">Prototype pattern</a>. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query Object [PoEEA]]]></title>
    <link href="http://blog.tolleiv.de/2008/06/query-object-poeea/"/>
    <updated>2008-06-20T19:29:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/06/query-object-poeea</id>
    <content type="html"><![CDATA[<p>Maybe you remember the <a href="http://www.cookiepattern.com/2008/05/specification-ddd.html">Specification Pattern</a> I explained some weeks ago. It enabled a easy and intuitive  searching within large object-collections. A drawback of my example was that I stored the objects in the memory. This can be really ineffective if you want a single object out of hundreds, because you have to create all of them to see which one fits the specification.
Normally you want to limit the number of objects and you also don&rsquo;t store large datasets in memory. The idea of the Query Object pattern is that it enables a usage, comparable to the specification pattern, for objects which are persisted in a database. The benefit is that it creates a query to exclude objects which won&rsquo;t satisfy your needs and therefore you wont mess up the memory anymore.
Once you have a query-object in place you should not get in touch with SQL anymore because it can encapsulate SQL completely, at least if you also have some kind of data mapping (coming soon), which is a great benefit for everyone who is not so familiar with SQL. (But don&rsquo;t forget, regarding performance, SQL-optimization is a very important thing).</p>

<p>So what we need for the Query Object in first place is a object, I&rsquo;ll use the Cookie out of the <a href="http://www.cookiepattern.com/2008/05/specification-ddd.html">specification pattern post</a> again. Then we need criteria-objects which hold the information for a single criteria, (determined by &ldquo;database-field&rdquo;, &ldquo;operator&rdquo; and &ldquo;value&rdquo;) and we also need the Query Objects itself to wrap up the SQL-querying and the object creation somehow.</p>

<p>A very simple example could look like this:</p>

<p>interface Critera {
public function getWhereClause();
}</p>

<p>class CookieCriteria implements Critera {</p>

<p>private $operator,$field,$value;</p>

<p>protected function __construct($operator,$field,$value) {
$this->operator=$operator;
$this->field=$field;
$this->value=$value;
}</p>

<p>public function getWhereClause() {
return implode(&ldquo; &rdquo;,array($this->field,$this->operator,$this->value));
}</p>

<p>public static function matches($field,$value) {
return new CookieCriteria(&ldquo;LIKE&rdquo;,$field,&lsquo;&ldquo;&rsquo;.$value.&lsquo;&rdquo;&rsquo;);
}</p>

<p>public static function greaterThan($field,$value) {
return new CookieCriteria(&ldquo;>&rdquo;,$field,$value);
}
}</p>

<p>class CookieFinder {
protected $criterias;</p>

<p>public function addCriteria(Critera $criteria) {
$this->criterias[] = $criteria;
}</p>

<p>public function generateSQL() {
$sql = &ldquo;SELECT * FROM cookies&rdquo;;</p>

<p>if(sizeof($this->criterias)) {
$where=array();
reset($this->criterias);
while(list(,$criteria)=each($this->criterias)) {
$where[] = $criteria->getWhereClause();
}
$sql.= sizeof($where)?&ldquo; WHERE &rdquo;.implode(&ldquo; AND &rdquo;,$where):&ldquo;&rdquo;;
}
return $sql;
}</p>

<p>public function find() {
$collection = array();
if(!$result = mysql_query($this->generateSQL())) {
throw new Exception(mysql_errno());
}
while($row = mysql_fetch_assoc($result)) {
$collection[] = new Cookie($row[&lsquo;name&rsquo;],$row[&lsquo;flavor&rsquo;],$name[&lsquo;size&rsquo;]);
}
return $collection;
}
}</p>

<p>Possible client code could look like this:
$finder = new CookieFinder();
$finder->addCriteria(CookieCriteria::matches(&ldquo;name&rdquo;,&ldquo;Granny%&rdquo;));
$finder->addCriteria(CookieCriteria::greaterThan(&ldquo;size&rdquo;,100));
$cookies = $finder->find();</p>

<p>We just pick up the Query Object, add one or more criteria and ask it to create the objects which fit them.</p>

<p>So this example is not as powerful as the one I used for the <a href="http://www.cookiepattern.com/2008/05/specification-ddd.html">Specification pattern</a>, but it should be a easy task to create some kind of &ldquo;nested criteria objects&rdquo;.
Query objects normally make use of data-mapping so that you can handle various classes, stored in different tables/databases, with a single and generic Query Object. This also enables to avoid SQL-Injection, since you&rsquo;re able to validate the fields and values before you sent them to your database, also some kind of database abstraction would be possible.
With the &ldquo;Query Object by example&rdquo;, which requires to build up a single object which is used as blueprint for the required objects, exists another flavor of this pattern which is very handy to use and more descriptive.
But no matter which flavor you prefer, Query Objects bring some real benefits when you&rsquo;ve to handle complex datasets &ndash; for smaller projects the effort might be to much so be careful where you use it.</p>
]]></content>
  </entry>
  
</feed>
