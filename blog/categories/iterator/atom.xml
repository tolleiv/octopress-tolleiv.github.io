<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iterator | blog.tolleiv.de]]></title>
  <link href="http://blog.tolleiv.de/blog/categories/iterator/atom.xml" rel="self"/>
  <link href="http://blog.tolleiv.de/"/>
  <updated>2014-05-04T18:58:01+02:00</updated>
  <id>http://blog.tolleiv.de/</id>
  <author>
    <name><![CDATA[Tolleiv Nietsch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iterator [GoF]]]></title>
    <link href="http://blog.tolleiv.de/2008/07/iterator-gof/"/>
    <updated>2008-07-07T19:30:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/07/iterator-gof</id>
    <content type="html"><![CDATA[<p>Lot&rsquo;s of people like to write down things into lists, so that they can go through that list later and check whether everything was fine. Normally every recipe has a list ~ there&rsquo;s always a list of ingredients at the beginning of the recipe.
This short example shows how such a list can be processed in PHP. So why would you want to have something else than a array to hold your objects? &ndash; My example still uses a array to hold the objects (uni- or bidirectional lists would also be possible) but it adds a kind of a facade to the array so that the common managements-tasks are handled within the List-Object. Everything you need for this example is present in PHP since version 5.0. The basic steps you need to do is to provide a &ldquo;Object&rdquo; and an &ldquo;ObjectList&rdquo; which implements the native <a href="http://www.php.net/manual/en/language.oop5.iterations.php">&ldquo;Iterator&rdquo;</a> interface and then you&rsquo;re able to have very handy lists :)</p>

<p>class Incredient {</p>

<p>public $name,$amount;
public function __construct($name,$amount) {
$this->name = $name;
$this->amount = $amount;
}
}</p>

<p>class Recipe implements Iterator {
public $title;
private $ingredients;</p>

<p>public function __construct ($title) {
$this->title = $title;
}</p>

<p>public function addIncredient(Incredient $in) {
$this->ingredients[] = $in;
}</p>

<p>public function current ()  {   return current ($this->ingredients);    }
public function key ()      {   return key($this->ingredients);         }
public function valid ()    {   return current ($this->ingredients);    }
public function rewind ()   {   return reset ($this->ingredients);      }
public function next ()     {   return next ($this->ingredients);       }
}</p>

<p>$cookieRecipe = new Recipe(&ldquo;Chocolate Cookie&rdquo;);
$cookieRecipe->addIncredient(new Incredient(&lsquo;Flour&rsquo;,&lsquo;2.5 cups&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Baking soda&rsquo;,&lsquo;1 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Salt&rsquo;,&lsquo;0.5 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Butter&rsquo;,&lsquo;1 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Sugar&rsquo;,&lsquo;1 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Brown Sugar&rsquo;,&lsquo;0.5 cup&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Vanilla extract&rsquo;,&lsquo;1 teaspoon&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Egg&rsquo;,&lsquo;1-2&rsquo;));
$cookieRecipe->addIncredient(new Incredient(&lsquo;Chocolate chips&rsquo;,&lsquo;2 cups&rsquo;));</p>

<p>// process recipe:
foreach($cookieRecipe as $inc) {
echo $inc->name.&ldquo; => &rdquo;.$inc->amount.&ldquo;<br/>&rdquo;;
}</p>

<p>As you see it&rsquo;s pretty easy to have lists of objects in PHP. You might also think that always creating to some list-object over and over again is very odd and you&rsquo;re right. For the most common tasks like <a href="http://www.php.net/manual/en/class.arrayiterator.php">iterating through arrays</a>, <a href="http://www.php.net/manual/en/class.directoryiterator.php">directory-lists</a> and a few more task you can use objects which are shipped with the Standard PHP Library ,which is also part of PHP since version 5 and mandatory in 5.3. So the example shown above could also look like this:</p>

<p>$recipe = array();
$recipe[] = new Incredient(&lsquo;Flour&rsquo;,&lsquo;2.5 cups&rsquo;);
$recipe[] = new Incredient(&lsquo;Baking soda&rsquo;,&lsquo;1 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Salt&rsquo;,&lsquo;0.5 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Butter&rsquo;,&lsquo;1 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Sugar&rsquo;,&lsquo;1 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Brown Sugar&rsquo;,&lsquo;0.5 cup&rsquo;);
$recipe[] = new Incredient(&lsquo;Vanilla extract&rsquo;,&lsquo;1 teaspoon&rsquo;);
$recipe[] = new Incredient(&lsquo;Egg&rsquo;,&lsquo;1-2&rsquo;);
$recipe[] = new Incredient(&lsquo;Chocolate chips&rsquo;,&lsquo;2 cups&rsquo;);</p>

<p>$recipeIncObj = new ArrayObject($recipe);
$ingredientsIt = $recipeIncObj->getIterator();</p>

<p>foreach($ingredientsIt as $inc) {
echo $inc->name.&ldquo; => &rdquo;.$inc->amount.&ldquo;<br/>&rdquo;;
}</p>

<p>As I said at the beginning, there are lots of situations where you might want to have a list for something and if you store that list in PHP the Iterator-pattern can keep your code clean and tasty :)</p>
]]></content>
  </entry>
  
</feed>
