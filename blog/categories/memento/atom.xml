<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memento | the fancy part of the web]]></title>
  <link href="http://tolleiv.github.io/blog/categories/memento/atom.xml" rel="self"/>
  <link href="http://tolleiv.github.io/"/>
  <updated>2014-05-04T01:05:15+02:00</updated>
  <id>http://tolleiv.github.io/</id>
  <author>
    <name><![CDATA[Tolleiv Nietsch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Memento [GoF]]]></title>
    <link href="http://tolleiv.github.io/blog/2008/05/13/memento-gof/"/>
    <updated>2008-05-13T09:59:00+02:00</updated>
    <id>http://tolleiv.github.io/blog/2008/05/13/memento-gof</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say you got a cookie from a repository your granny and you&rsquo;re not sure if you like the new taste. Wouldn&rsquo;t it be cool if you could just try it and revoke the operation first bite if you don&rsquo;t like it?</p>

<p>In the world of OOP thats a easy job which can be handled by the so called memento pattern &ndash; you just save the inner state of the object  within a memento object and revoke you actions whenever you like&hellip;</p>

<p>As UML the example looks like this:
<a href="http://bp2.blogger.com/_l5fIZzJyYfc/SClV6dPibdI/AAAAAAAAABA/bFyT-BEsqrU/s1600-h/memento-pattern.png"><img src="http://bp2.blogger.com/_l5fIZzJyYfc/SClV6dPibdI/AAAAAAAAABA/bFyT-BEsqrU/s400/memento-pattern.png" alt="" /></a>
Show PHP Source Code</p>

<pre><code>class CookieMemento {
    protected $flavor,$size;    
    public function __construct($flavor,$size=100) {
        $this-&gt;flavor=$flavor;
        $this-&gt;size=$size;
    }
    public function getMemento() {
        return new CookieMemento($this-&gt;flavor,$this-&gt;size);
    }
    public function setMemento(CookieMemento $memento) {
        $this-&gt;flavor=$memento-&gt;flavor;
        $this-&gt;size=$memento-&gt;size;
    }    
}

class Cookie extends CookieMemento {

    public function eat($reduceValue) {     
        $this-&gt;size-=($reduceValue&gt;$this-&gt;size)?$this-&gt;size:$reduceValue;        
    }    

    public function printStatus() {
        echo ‘This cookie is a ’.$this-&gt;flavor.‘ cookie which has a size of ’.$this-&gt;size.‘.&lt;br&gt;&lt;/br&gt;’;
    }
}

class Client { 
    public function run() {
        $theCookie = new Cookie(‘chocolate’,100);
        $theMemento = $theCookie-&gt;getMemento();
        echo $theCookie-&gt;printStatus();        
        $theCookie-&gt;eat(50);
        echo $theCookie-&gt;printStatus();       
        $theCookie-&gt;eat(50);
        echo $theCookie-&gt;printStatus();       
        echo ‘Hm I\’d like to eat it again …. *grin*&lt;br&gt;&lt;/br&gt;’;
        $theCookie-&gt;setMemento($theMemento);
        echo $theCookie-&gt;printStatus();
        echo ‘ *biggrin* ’;
    }
}

$cookieMonster = new Client();
$cookieMonster-&gt;run();
</code></pre>
]]></content>
  </entry>
  
</feed>
