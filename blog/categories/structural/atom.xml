<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: structural | blog.tolleiv.de]]></title>
  <link href="http://blog.tolleiv.de/blog/categories/structural/atom.xml" rel="self"/>
  <link href="http://blog.tolleiv.de/"/>
  <updated>2014-05-27T08:52:20+02:00</updated>
  <id>http://blog.tolleiv.de/</id>
  <author>
    <name><![CDATA[Tolleiv Nietsch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Decorator [GoF]]]></title>
    <link href="http://blog.tolleiv.de/2008/05/decorator-gof/"/>
    <updated>2008-05-13T00:59:00+02:00</updated>
    <id>http://blog.tolleiv.de/2008/05/decorator-gof</id>
    <content type="html"><![CDATA[<p>As the first pattern I&rsquo;d like to introduce the decorator pattern &ndash; it&rsquo;s one of the [GoF]&ndash; structural patterns. It enables to extend the functionality of a existing method by wrapping a so called decorator-object.</p>

<p>So maybe you already know the situation ;) , your granny  is going to bake cookies and you think of how they gonna taste &ndash; so cookie is our main-object and the different additional spices and other options which refine the taste of the cookies are the decoration for it. The cookies, pardon main-objects, are fine without the decoration but they&rsquo;re much better with and the best thing is that you&rsquo;re able to combine the decorations&hellip; yummy</p>

<p>So that&rsquo;s how this would look like more technically:
<a href="http://bp2.blogger.com/_l5fIZzJyYfc/SCjU0tPibZI/AAAAAAAAAAU/uuR_geevSdw/s1600-h/decorator-pattern.png"><img src="http://bp2.blogger.com/_l5fIZzJyYfc/SCjU0tPibZI/AAAAAAAAAAU/uuR_geevSdw/s400/decorator-pattern.png" alt="" /></a></p>

<pre><code>stract class Cookie {
    protected $flavor;
    public function __construct($flavor) {
        $this-&gt;flavor=$flavor;
    }    
    abstract public function descripeFlavor();
}

class GrannysCookie extends Cookie {
    public function descripeFlavor() {
        echo ‘&lt;br&gt;&lt;/br&gt;Granny baked a cookie which has a taste of ’;
        echo $this-&gt;flavor;
    }
}

abstract class CookieDecorator extends Cookie {
    protected $cookie;
    public function __construct(Cookie $cookie) {
        $this-&gt;cookie = $cookie;
    }    
    //abstract public function descripeFlavor();    
}

class FreshCookieDecorator extends CookieDecorator {
    public function descripeFlavor() {
        $this-&gt;cookie-&gt;descripeFlavor();
        echo ‘ which smells fresh from the oven’;
    }
}

class CrumbleCookieDecorator extends CookieDecorator {
    public function descripeFlavor() {        
        $this-&gt;cookie-&gt;descripeFlavor();
        echo ‘ it has tasty crumbles ’;
    }
}

$cookie = new GrannysCookie(‘chocolate’);
$cookie-&gt;descripeFlavor();

$crumbleCookie = new CrumbleCookieDecorator($cookie);
$crumbleCookie-&gt;descripeFlavor();

$freshCookie = new FreshCookieDecorator($cookie);
$freshCookie-&gt;descripeFlavor();

$freshAndCrumbledCookie = new FreshCookieDecorator($crumbleCookie);
$freshAndCrumbledCookie-&gt;descripeFlavor();
</code></pre>

<p><a href="http://en.wikipedia.org/wiki/Decorator_pattern">additional Information</a></p>
]]></content>
  </entry>
  
</feed>
